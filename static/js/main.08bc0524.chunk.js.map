{"version":3,"sources":["component/Header.js","component/CreateEditCard.js","component/Activityboard.js","component/Banner.js","component/AddListModal.js","component/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","CreateEditCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","modalStatus","modalType","Description","createdBy","listName","toggle","bind","assertThisInitialized","handleChangeName","nextProps","undefined","cardData","setState","closeModal","event","defineProperty","target","name","value","randomnumber","Math","floor","random","newCard","id","createCard","_this2","Modal","isOpen","ModalHeader","ModalBody","placeholder","onChange","e","type","ModalFooter","onClick","handleSubmit","Activityboard","onDrop","ev","cat","onDropEvent","listData","backlogData","openModal","cardPassData","toggleModal","createNewCard","deleteCard","editCard","preventDefault","dataTransfer","setData","deleteCardData","data","idx","key","draggable","onDragStart","index_es","icon","list","createCardBody","_this3","CreateEditCard_CreateEditCard","onDragOver","map","index","renderList","href","Banner","data-toggle","data-target","AddListModal","createList","kanbanData","require","Body","kanban","createNewList","targetId","getData","task","testPass","i","length","parseInt","splice","updateBoard","push","desc","activityList","Activityboard_Activityboard","console","log","Banner_Banner","AddListModal_AddListModal","App","Header_Header","Body_Body","Boolean","window","location","hostname","match","library","add","faEnvelope","faPen","faTrash","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08bc0524.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Header extends Component {\n  render() {\n    return (\n        <div className=\"header\">\n        <div className=\"col-12\">\n         <h5 className=\"header-text\">Kanban</h5>\n        </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nexport default class CreateEditCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { modal: props.modalStatus, modalStatus: props.modalType, Description: '', createdBy: '', listName: props.listName };\n        this.toggle = this.toggle.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.cardData.Description !== undefined) {\n            this.setState({\n                modal: nextProps.modalStatus,\n                modalStatus: nextProps.modalType,\n                Description: nextProps.cardData.Description, \n                createdBy: nextProps.cardData.createdBy,\n            });\n        } else {\n            this.setState({\n                modal: nextProps.modalStatus,\n                modalStatus: nextProps.modalType,\n                Description: '', \n                createdBy: '',\n            });\n        }\n    }\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n        this.props.closeModal();\n    }\n    handleChangeName(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    handleSubmit() {\n        const maximum = 10000;\n        const minimum = 45;\n        const randomnumber = Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n        const newCard = {\n            Description: this.state.Description,\n            createdBy: this.state.createdBy,\n            id: randomnumber\n        }\n        this.props.createCard(newCard, this.state.listName);\n        this.toggle();\n    }\n    render() {\n        return (\n            <div className=\"add-cardModal\">\n\n<Modal isOpen={this.state.modal}>\n                {this.state.modalStatus === 'edit' ? \n                <div>\n                <ModalHeader>Edit</ModalHeader>\n                <ModalBody>\n                    <div className=\"row\">\n                        <div className=\"form-group col-12\">\n                            <textarea value={this.state.Description} name=\"Description\" placeholder=\"Description\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                        </div>\n                        <div className=\"form-group col-12\">\n                            <input type=\"text\" value={this.state.createdBy} name=\"createdBy\" placeholder=\"createdBy\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-success\" onClick={(e) => this.handleSubmit(e)}>Ok</button>\n                </ModalFooter>\n        </div>\n                :\n                <div>\n                        <ModalHeader>Add List</ModalHeader>\n                        <ModalBody>\n                            <div className=\"row\">\n                                <div className=\"form-group col-12\">\n                                    <textarea value={this.state.Description} name=\"Description\" placeholder=\"Description\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                                </div>\n                                <div className=\"form-group col-12\">\n                                    <input type=\"text\" value={this.state.createdBy} name=\"createdBy\" placeholder=\"createdBy\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                                </div>\n                            </div>\n                        </ModalBody>\n                        <ModalFooter>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={(e) => this.handleSubmit(e)}>Submit</button>\n                            <button className=\"btn btn-primary\" onClick={this.toggle}>Cancel</button>\n                        </ModalFooter>\n                </div>\n                }\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport CreateEditCard from './CreateEditCard';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nexport default class Activityboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listData: props.backlogData,\n            listName: props.listName,\n            openModal: false,\n            modalType: '',\n            cardPassData: {}\n        }\n        this.toggleModal = this.toggleModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.createNewCard = this.createNewCard.bind(this);\n        this.deleteCard = this.deleteCard.bind(this);\n        this.editCard = this.editCard.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            listData: nextProps.backlogData\n        })\n    }\n    onDragOver(e) {\n        e.preventDefault();\n    }\n    onDragStart(ev, id) {\n        ev.dataTransfer.setData('id', id);\n    }\n    onDrop = (ev, cat) => {\n        this.props.onDropEvent(ev, cat);\n    }\n    deleteCard(e, id) {\n        e.preventDefault();\n        this.props.deleteCardData(id, this.state.listName);\n    }\n    editCard(e, data){\n        e.preventDefault();\n        this.setState({\n            openModal: true,\n            modalType: 'edit',\n            cardPassData: data\n        }, function(){\n        this.deleteCard(e, data.id);\n        })\n    }\n    renderList(data, idx) {\n        return <div className=\"list-cards\" key={idx}>\n            <div className=\"list-card\" draggable onDragStart={(e) => this.onDragStart(e, data.id)}>\n                <div className=\"list-card-header\">\n                <div className=\"pr-2 pen-display\">\n                <FontAwesomeIcon\n                    onClick={(e) => this.editCard(e, data)}\n                        icon=\"pen\"\n                    />\n                    </div>\n                    <FontAwesomeIcon\n                    onClick={(e) => this.deleteCard(e, data.id)}\n                        icon=\"trash\"\n                    />\n                </div>\n                <div className=\"list-card-details\">\n                    {data.Description}\n                </div>\n            </div>\n        </div>\n    }\n    toggleModal() {\n        this.setState({\n            openModal: true,\n            modalType: 'add',\n            cardPassData: {}\n        })\n    }\n    closeModal() {\n        this.setState({\n            openModal: false\n        })\n    }\n    createNewCard(e, list) {\n        this.props.createCardBody(e, list);\n    }\n    render() {\n        return (\n            <div className=\"activityboard\">\n                <CreateEditCard modalStatus={this.state.openModal} listName={this.state.listName} closeModal={this.closeModal} modalType={this.state.modalType} createCard={this.createNewCard} cardData={this.state.cardPassData}/>\n                <div className=\"board\" onDragOver={(e) => this.onDragOver(e)} onDrop={(e) => { this.onDrop(e, this.state.listName) }}>\n                    <div className=\"list\">\n                        <div className=\"list-header\">\n                            <div className=\"header-title\">{this.state.listName}</div>\n                        </div>\n                        <div className=\"list-cards-scroller\">\n                            {this.state.listData.map((data, index) => {\n                                return this.renderList(data, index);\n                            })}\n                        </div>\n                        <span onClick={(e) => this.toggleModal(e)} href=\"#\" draggable={false} className=\"create-new-link\">\n                            Create Task\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Banner extends Component {\n    openModal(){\n        this.props.openModal();\n    }\n    render() {\n        return (\n            <div className=\"banner\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-addlist\" data-toggle=\"modal\" data-target=\"#myModal\" onClick={(e) => this.openModal(e)}>Add List</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nexport default class AddListModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { modal: props.modalStatus, name: '' };\n\n        this.toggle = this.toggle.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            modal: nextProps.modalStatus\n        });\n    }\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n        this.props.closeModal();\n    }\n    handleChangeName(event) {\n        this.setState({ name: event.target.value });\n    }\n\n    handleSubmit() {\n        this.props.createList(this.state.name);\n        this.toggle();\n    }\n    render() {\n        return (\n            <div className=\"add-listmodal\">\n                <Modal isOpen={this.state.modal}>\n                        <ModalHeader>Add List</ModalHeader>\n                        <ModalBody>\n                            <div className=\"row\">\n                                <div className=\"form-group col-12\">\n                                    <input type=\"text\" value={this.state.name} placeholder=\"Enter List Name\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                                </div>\n                            </div>\n                        </ModalBody>\n                        <ModalFooter>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={(e) => this.handleSubmit(e)}>Submit</button>\n                            <button className=\"btn btn-primary\" onClick={this.toggle}>Cancel</button>\n                        </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Activityboard from './Activityboard';\nimport Banner from './Banner';\nimport AddListModal from './AddListModal';\nconst kanbanData = require('../kanban.json');\nlet data = kanbanData;\nexport default class Body extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kanban: kanbanData,\n      openModal: false\n    }\n    this.onDropEvent = this.onDropEvent.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.createNewList = this.createNewList.bind(this);\n    this.createNewCard = this.createNewCard.bind(this);\n    this.deleteCard = this.deleteCard.bind(this);\n  }\n  onDropEvent(e, id) {\n    let targetId = e.dataTransfer.getData(\"id\");\n    let task = {};\n    let testPass = false;\n    for (let key in data) {\n      if (testPass) {\n        break;\n      } else {\n        for (let i = 0; i < data[key].length; i++) {\n          if (parseInt(data[key][i].id) === parseInt(targetId)) {\n            task = data[key][i];\n            data[key].splice([i], 1);\n            testPass = true;\n            break;\n          }\n        }\n      }\n    }\n    this.updateBoard(task, id);\n  }\n  updateBoard(task, id){\n    if(task.id !== undefined) {\n      for(let key in data) {\n        if (key === id) {\n          data[key].push(task);\n          break;\n        }\n      }\n      this.setState({\n        kanban: data\n      })\n    }\n  }\n  createNewCard(desc, id){\n    for(let key in data) {\n      if (key === id) {\n        data[key].push(desc);\n        break;\n      }\n    }\n    this.setState({\n      kanban: data\n    })\n  }\n  deleteCard(id, list){\n    let testPass = false;\n    for(let key in data){\n      if(testPass) {\n        break;\n      } else {\n        if(key === list){\n          testPass = true;\n          for(let i=0; i< data[key].length; i++){\n            if(data[key][i].id === parseInt(id)){\n              data[key].splice([i], 1);\n              break;\n            }\n          }\n        }\n      }\n    }\n    this.setState({\n      kanban: data\n    })\n  }\n  renderList() {\n    const activityList = [];\n    for (let key in this.state.kanban) {\n      activityList.push(<Activityboard backlogData={this.state.kanban[key]} listName={key} key={key} onDropEvent={this.onDropEvent} createCardBody={this.createNewCard} deleteCardData={this.deleteCard}/>)\n    }\n    return <div className=\"body-scroller\">\n      {activityList}\n    </div>\n  }\n  toggleModal(){\n    this.setState({\n      openModal: true\n    })\n  }\n  closeModal(){\n    this.setState({\n      openModal: false\n    })\n  }\n  createNewList(e){\n    console.log('Under Construction !!!');\n  }\n  render() {\n    // this.renderList();\n    return (\n      <div className=\"body\">\n      <Banner openModal={this.toggleModal}/>\n      <AddListModal modalStatus={this.state.openModal} closeModal={this.closeModal} createList={this.createNewList}/>\n        {\n          this.renderList()\n        }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './component/Header';\nimport Body from './component/Body';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faEnvelope, faTrash, faPen } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faEnvelope, faPen, faTrash);\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}