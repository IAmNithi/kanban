{"version":3,"sources":["component/Header.js","component/CreateEditCard.js","component/Activityboard.js","component/Banner.js","component/AddListModal.js","component/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","CreateEditCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","modalStatus","isEditable","modalType","Description","createdBy","listName","comments","id","addComment","comment","toggle","bind","assertThisInitialized","handleChangeName","handleDelete","nextProps","undefined","cardData","setState","closeModal","event","defineProperty","target","name","value","e","type","randomnumber","Math","floor","random","newCard","createCard","updateCard","deleteCard","push","_this2","Modal","isOpen","ModalHeader","ModalBody","onClick","enableEdit","placeholder","onChange","length","map","data","idx","key","addComments","handleCommentChange","href","pushComment","ModalFooter","handleSubmit","Activityboard","onDrop","ev","cat","onDropEvent","listData","backlogData","openModal","cardPassData","toggleModal","createNewCard","editCard","preventDefault","dataTransfer","setData","deleteCardData","draggable","onDragStart","da","ind","list","createCardBody","_this3","CreateEditCard_CreateEditCard","onDragOver","index","renderList","Banner","data-toggle","data-target","AddListModal","createList","kanbanData","require","Body","kanban","createNewList","targetId","getData","task","testPass","i","parseInt","splice","updateBoard","unshift","desc","activityList","Activityboard_Activityboard","sampleData","assign","Banner_Banner","AddListModal_AddListModal","App","Header_Header","Body_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2cae0de5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Header extends Component {\n  render() {\n    return (\n        <div className=\"header\">\n        <div className=\"col-12\">\n         <h5 className=\"header-text\">Kanban</h5>\n        </div>\n        </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nexport default class CreateEditCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { modal: props.modalStatus, isEditable: false, modalStatus: props.modalType, Description: '', createdBy: '', listName: props.listName, comments: [], id: 0, addComment: false, comment: '' };\n        this.toggle = this.toggle.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.cardData.Description !== undefined) {\n            this.setState({\n                modal: nextProps.modalStatus,\n                modalStatus: nextProps.modalType,\n                Description: nextProps.cardData.Description, \n                createdBy: nextProps.cardData.createdBy,\n                comments: nextProps.cardData.comments,\n                id: nextProps.cardData.id,\n                isEditable: false,\n                addComment: false\n            });\n        } else {\n            this.setState({\n                modal: nextProps.modalStatus,\n                modalStatus: nextProps.modalType,\n                Description: '', \n                createdBy: ''\n            });\n        }\n    }\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n        this.props.closeModal();\n    }\n    handleChangeName(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n    handleSubmit(e, type) {\n        if(type === 'new') {\n            const maximum = 10000;\n            const minimum = 45;\n            const randomnumber = Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n            const newCard = {\n                Description: this.state.Description,\n                createdBy: this.state.createdBy,\n                id: randomnumber,\n                comments: this.state.comments,\n                isEditable: false,\n                addComment: false\n            }\n            this.props.createCard(newCard, this.state.listName);\n        } else {\n            const newCard = {\n                Description: this.state.Description,\n                createdBy: this.state.createdBy,\n                id: this.state.id,\n                comments: this.state.comments,\n                isEditable: false,\n                addComment: false\n            }\n            this.props.updateCard(newCard, this.state.listName);\n        }\n        this.toggle();\n    }\n    handleDelete(){\n        this.props.deleteCard(this.state.id, this.state.listName);\n        this.toggle();\n    }\n    enableEdit(){\n        this.setState({\n            isEditable: true\n        })\n    }\n    addComments(){\n        this.setState({\n            addComment: true\n        })\n    }\n    handleCommentChange(e){\n        this.setState({\n            comment: e.target.value\n        });\n    }\n    pushComment(){\n        let comment = this.state.comments;\n        comment.push(this.state.comment);\n        this.setState({\n            comments: comment\n        }, function(){\n            this.setState({\n                comment: '',\n                addComment: false\n            });\n        })\n    }\n    render() {\n        return (\n            <div className=\"add-cardModal\">\n\n<Modal isOpen={this.state.modal}>\n                {this.state.modalStatus === 'edit' ? \n                <div>\n                <ModalHeader>Card Description</ModalHeader>\n                <ModalBody>\n                    <div className=\"description-modal\">\n                    <div className=\"pr-2 edit-name\" onClick={(e) => this.enableEdit(e)}>\n                    Edit Card\n                    </div>\n                    {this.state.isEditable ? \n                    <div className=\"row\">\n                        <div className=\"form-group col-12\">\n                            <textarea value={this.state.Description} name=\"Description\" placeholder=\"Description\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                        </div>\n                        <div className=\"form-group col-12\">\n                            <input type=\"text\" value={this.state.createdBy} name=\"createdBy\" placeholder=\"createdBy\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                        </div>\n                    </div> : \n                    <div className=\"row\">\n                        <div className=\"col-12 p-2\">Description: {this.state.Description}</div>\n                        <div className=\"col-12 p-2\">Created By: {this.state.createdBy}</div>\n                    {this.state.comments.length !==0 ? <div className=\"col-12 p-2\">comments: <br />{this.state.comments.map((data, idx) => <p className=\"text-muted\" key={idx}>{data}</p>)}</div> : <div className=\"col-12 p-2\">No Comments</div> }\n                    <div className=\"pr-2 edit-name\" onClick={(e) => this.addComments(e)}>\n                    Add Comments\n                    </div>\n                    {this.state.addComment ? \n                    <div className=\"form-group col-12\">\n                                    <textarea value={this.state.comment} name=\"Comment\" placeholder=\"comment\" onChange={(e) => this.handleCommentChange(e)} className=\"form-control\" />\n                                    {/* eslint-disable-next-line */}\n                                    <a href=\"#\" onClick={(e) => this.pushComment(e)}>save</a>\n                    </div> : ''}\n                    </div> \n                    }\n                    </div>\n                </ModalBody>\n                <ModalFooter>\n                    <button type=\"button\" className=\"btn btn-success\" onClick={(e) => this.handleSubmit(e, 'edit')}>Ok</button>\n                    <button type=\"button\" className=\"btn btn-danger\" onClick={(e) => this.handleDelete(e)}>Delete Card</button>\n                </ModalFooter>\n        </div>\n                :\n                <div>\n                        <ModalHeader>Add List</ModalHeader>\n                        <ModalBody>\n                            <div className=\"row\">\n                                <div className=\"form-group col-12\">\n                                    <textarea value={this.state.Description} name=\"Description\" placeholder=\"Description\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                                </div>\n                                <div className=\"form-group col-12\">\n                                    <input type=\"text\" value={this.state.createdBy} name=\"createdBy\" placeholder=\"createdBy\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                                </div>\n                            </div>\n                        </ModalBody>\n                        <ModalFooter>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={(e) => this.handleSubmit(e, 'new')}>Submit</button>\n                            <button className=\"btn btn-primary\" onClick={this.toggle}>Cancel</button>\n                        </ModalFooter>\n                </div>\n                }\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport CreateEditCard from './CreateEditCard';\nexport default class Activityboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listData: props.backlogData,\n            listName: props.listName,\n            openModal: false,\n            modalType: '',\n            cardPassData: {}\n        }\n        this.toggleModal = this.toggleModal.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.createNewCard = this.createNewCard.bind(this);\n        this.deleteCard = this.deleteCard.bind(this);\n        this.editCard = this.editCard.bind(this);\n        this.updateCard = this.updateCard.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            listData: nextProps.backlogData\n        })\n    }\n    onDragOver(e) {\n        e.preventDefault();\n    }\n    onDragStart(ev, id) {\n        ev.dataTransfer.setData('id', id);\n    }\n    onDrop = (ev, cat) => {\n        this.props.onDropEvent(ev, cat);\n    }\n    deleteCard(id, listName) {\n        this.props.deleteCardData(id, listName);\n    }\n    editCard(e, data) {\n        e.preventDefault();\n        this.setState({\n            openModal: true,\n            modalType: 'edit',\n            cardPassData: data\n        })\n    }\n    renderList(data, idx) {\n        return <div className=\"list-cards\" key={idx}>\n            <div className=\"list-card\" draggable onDragStart={(e) => this.onDragStart(e, data.id)} onClick={(e) => this.editCard(e, data)}>\n                <div className=\"list-card-details\">\n                    {data.Description}\n                </div>\n                {data.comments.length !== 0 ?\n                    <div className=\"list-card-comment text-left\">\n                        <div className=\"comment-tag\">\n                            Comments\n                        </div>\n                        {data.comments.map((da, ind) => \n                        <div className=\"comments-body text-muted\" key={ind}>\n                            {da}\n                        </div>)}\n                    </div>\n                : ''}\n            </div>\n        </div>\n    }\n    toggleModal() {\n        this.setState({\n            openModal: true,\n            modalType: 'add',\n            cardPassData: {}\n        })\n    }\n    closeModal() {\n        this.setState({\n            openModal: false\n        })\n    }\n    createNewCard(e, list) {\n        this.props.createCardBody(e, list);\n    }\n    updateCard(e, list) {\n        this.props.updateCard(e, list);\n    }\n    render() {\n        return (\n            <div className=\"activityboard\">\n                <CreateEditCard modalStatus={this.state.openModal} listName={this.state.listName} closeModal={this.closeModal} modalType={this.state.modalType} createCard={this.createNewCard} updateCard={this.updateCard} cardData={this.state.cardPassData} deleteCard={this.deleteCard} />\n                <div className=\"board\" onDragOver={(e) => this.onDragOver(e)} onDrop={(e) => { this.onDrop(e, this.state.listName) }}>\n                    <div className=\"list\">\n                        <div className=\"list-header\">\n                            <div className=\"header-title\">{this.state.listName}</div>\n                        </div>\n                        <div className=\"list-cards-scroller\">\n                            {this.state.listData.map((data, index) => {\n                                return this.renderList(data, index);\n                            })}\n                        </div>\n                        <span onClick={(e) => this.toggleModal(e)} href=\"#\" draggable={false} className=\"create-new-link text-muted text-left\">\n                            Add a Card...\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class Banner extends Component {\n    openModal(){\n        this.props.openModal();\n    }\n    render() {\n        return (\n            <div className=\"banner\">\n                <div className=\"col-12\">\n                    <button className=\"btn btn-addlist\" data-toggle=\"modal\" data-target=\"#myModal\" onClick={(e) => this.openModal(e)}>Add List</button>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nexport default class AddListModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { modal: props.modalStatus, name: '' };\n\n        this.toggle = this.toggle.bind(this);\n        this.handleChangeName = this.handleChangeName.bind(this);\n    }\n    componentWillReceiveProps(nextProps){\n        this.setState({\n            modal: nextProps.modalStatus\n        });\n    }\n    toggle() {\n        this.setState({\n            modal: !this.state.modal\n        });\n        this.props.closeModal();\n    }\n    handleChangeName(event) {\n        this.setState({ name: event.target.value });\n    }\n\n    handleSubmit() {\n        this.props.createList(this.state.name);\n        this.toggle();\n    }\n    render() {\n        return (\n            <div className=\"add-listmodal\">\n                <Modal isOpen={this.state.modal}>\n                        <ModalHeader>Add List</ModalHeader>\n                        <ModalBody>\n                            <div className=\"row\">\n                                <div className=\"form-group col-12\">\n                                    <input type=\"text\" value={this.state.name} placeholder=\"Enter List Name\" onChange={(e) => this.handleChangeName(e)} className=\"form-control\" />\n                                </div>\n                            </div>\n                        </ModalBody>\n                        <ModalFooter>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={(e) => this.handleSubmit(e)}>Submit</button>\n                            <button className=\"btn btn-primary\" onClick={this.toggle}>Cancel</button>\n                        </ModalFooter>\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Activityboard from './Activityboard';\nimport Banner from './Banner';\nimport AddListModal from './AddListModal';\nconst kanbanData = require('../kanban.json');\nlet data = kanbanData;\nexport default class Body extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kanban: kanbanData,\n      openModal: false\n    }\n    this.onDropEvent = this.onDropEvent.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.createNewList = this.createNewList.bind(this);\n    this.createNewCard = this.createNewCard.bind(this);\n    this.deleteCard = this.deleteCard.bind(this);\n    this.updateCard = this.updateCard.bind(this);\n  }\n  onDropEvent(e, id) {\n    let targetId = e.dataTransfer.getData(\"id\");\n    let task = {};\n    let testPass = false;\n    for (let key in data) {\n      if (testPass) {\n        break;\n      } else {\n        for (let i = 0; i < data[key].length; i++) {\n          if (parseInt(data[key][i].id) === parseInt(targetId)) {\n            task = data[key][i];\n            data[key].splice([i], 1);\n            testPass = true;\n            break;\n          }\n        }\n      }\n    }\n    this.updateBoard(task, id);\n  }\n  updateBoard(task, id){\n    if(task.id !== undefined) {\n      for(let key in data) {\n        if (key === id) {\n          data[key].unshift(task);\n          break;\n        }\n      }\n      this.setState({\n        kanban: data\n      })\n    }\n  }\n  createNewCard(desc, id){\n    for(let key in data) {\n      if (key === id) {\n        data[key].unshift(desc);\n        break;\n      }\n    }\n    this.setState({\n      kanban: data\n    })\n  }\n  updateCard(desc, id){\n    for(let key in data) {\n      if (key === id) {\n        for(let i=0; i<data[key].length; i++){\n          if(parseInt(data[key][i].id) === parseInt(desc.id)){\n            data[key].splice([i], 1);\n            data[key].unshift(desc);\n            break;\n          }\n        }\n      }\n    }\n    this.setState({\n      kanban: data\n    })\n  }\n  deleteCard(id, list){\n    let testPass = false;\n    for(let key in data){\n      if(testPass) {\n        break;\n      } else {\n        if(key === list){\n          testPass = true;\n          for(let i=0; i< data[key].length; i++){\n            if(data[key][i].id === parseInt(id)){\n              data[key].splice([i], 1);\n              break;\n            }\n          }\n        }\n      }\n    }\n    this.setState({\n      kanban: data\n    })\n  }\n  renderList() {\n    const activityList = [];\n    for (let key in this.state.kanban) {\n      activityList.push(<Activityboard backlogData={this.state.kanban[key]} listName={key} key={key} onDropEvent={this.onDropEvent} createCardBody={this.createNewCard} updateCard={this.updateCard} deleteCardData={this.deleteCard}/>)\n    }\n    return <div className=\"body-scroller\">\n      {activityList}\n    </div>\n  }\n  toggleModal(){\n    this.setState({\n      openModal: true\n    })\n  }\n  closeModal(){\n    this.setState({\n      openModal: false\n    })\n  }\n  createNewList(e){\n    let sampleData =  {};\n    sampleData[e] = [];\n    data = Object.assign({},this.state.kanban,sampleData);\n    this.setState({\n      kanban: data\n    });\n  }\n  render() {\n    // this.renderList();\n    return (\n      <div className=\"body\">\n      <Banner openModal={this.toggleModal}/>\n      <AddListModal modalStatus={this.state.openModal} closeModal={this.closeModal} createList={this.createNewList}/>\n        {\n          this.renderList()\n        }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './component/Header';\nimport Body from './component/Body';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Body />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}